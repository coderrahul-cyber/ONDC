// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name   String 
  password String
  contactDetail  ContactDetail? @relation(name: "ContactDetail")
  createdAt DateTime @default(now())
  updateAt   DateTime @updatedAt
}

model ContactDetail{
  id Int @id @default(autoincrement())
  phoneNumber String
  userId  Int @unique
  user User @relation( name: "ContactDetail" , fields: [userId] , references: [id] , onDelete: Cascade)
  address UserAddress?
  createdAt  DateTime @default(now())
  updateAt DateTime @updatedAt
}

model UserAddress {
  id Int @id @default(autoincrement())
  street String 
  city String
  state String
  zipcode String
  country String
  // isDefault Boolean @default(false)
  contactDetailId Int          @unique
  contactDetail  ContactDetail @relation(fields: [contactDetailId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}



